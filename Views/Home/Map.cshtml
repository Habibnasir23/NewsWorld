@model IEnumerable<News>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WorldNews</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins;700&display=swap">
    <link rel="stylesheet" href="../WorldNews/wwwroot/css/site.css">
</head>
<body>

    <h1>Welcome to WorldNews!</h1>

    <!-- "How to Use" Dialog -->
    <div id="howToUseDialog" class="dialog">
        <div class="dialog-content">
            <h2>About WorldNews</h2>
            <p>Welcome to our TigerHacks submission! Here's a quick guide on what we offer and how to use it:</p>
            <ul class="left-align-list">
                <li>We offer an immersive experience through a map that gives you trending news from across the world. </li>
                <li>
                    As you scroll, or zoom, across the world map, the news you see is randomly generated; we want to <br />
                    show you each part of the world.
                </li>
                <li>Once you tap an icon, you will see some basic information, and if it interests you, navigate to it!</li>
                <li>
                    To make this experience truly immersive, we embedded Google maps' street view feature to get an idea<br />
                    of what the news article's topic's environment is like.
                </li>
                <li>Enjoy!</li>
            </ul>
            <p>Made by MohammadHossein Momeni, Habib Nasir, Mohammed Abdikebir, and Krishna Chebolu</p>
            <button id="closeHowToUseButton">Got it!</button>
        </div>
    </div>

    <div id="map"></div>
    @* <button onclick="refreshMarkers()">Refresh</button> *@

    <!-- The Modal -->
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="modal-column" id="modal-image-container">
                <!-- Image will be inserted here -->
            </div>
            <div class="modal-column text-content">
                <h2 id="modal-heading">Modal Heading</h2>
                <p id="modal-summary">Some text in the Modal..</p>
            </div>
        </div>

    </div>

    <script>

        let map;
        let markersArray = [];
        const allMarkers = [
            ["New York", 40.712776, -74.005974, 'https://images.pexels.com/photos/18844140/pexels-photo-18844140/free-photo-of-building-of-natwest-bank-in-llandudno.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', 'Heading', 'This is the summary'],
            ["Sydney", -33.868820, 151.209290, 'https://images.pexels.com/photos/16776919/pexels-photo-16776919/free-photo-of-blue-motor-scooter-standing-outside-a-beauty-center.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["Rio de Janeiro", -22.906847, -43.172897, 'https://images.pexels.com/photos/14661918/pexels-photo-14661918.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["Cape Town", -33.924870, 18.424055, 'https://images.pexels.com/photos/18937801/pexels-photo-18937801/free-photo-of-wanna-play-football-or-drone.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["Moscow", 55.755825, 37.617298, 'https://images.pexels.com/photos/15524939/pexels-photo-15524939/free-photo-of-rock-formation-in-sea.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["Beijing", 39.904202, 116.407394, 'https://images.pexels.com/photos/18325774/pexels-photo-18325774/free-photo-of-cheese-daisy.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["Cairo", 30.044420, 31.235712, 'https://images.pexels.com/photos/17265260/pexels-photo-17265260/free-photo-of-exterior-of-a-skyscraper.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["New Delhi", 28.613939, 77.209023, 'https://images.pexels.com/photos/17389140/pexels-photo-17389140/free-photo-of-a-large-ferris-wheel-against-a-blue-sky.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load', "Heading", "This is the summary"],
            ["Tokyo", 35.689487, 139.691711, 'https://images.pexels.com/photos/16064875/pexels-photo-16064875/free-photo-of-white-flowers-in-nature.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"],
            ["London", 51.507351, -0.127758, 'https://images.pexels.com/photos/17960588/pexels-photo-17960588/free-photo-of-basketball-hoop-in-the-sunlight.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', "Heading", "This is the summary"]
        ];


        var singleNews = []

        var NewsDataSet = []

        var newsData = @Html.Raw(Json.Serialize(Model));

        // Now you can use newsData as a JavaScript array of objects
        
       

        


        var bounds;
        function initMap() {

            // Update MAP_ID with custom map ID
            map = new google.maps.Map(document.getElementById('map'), {
                center: {
                    lat: 0,
                    lng: 0,
                },
                zoom: 2,
                mapId: '5da3e99c6ecdf566',
                mapTypeControl: false,
                fullscreenControl: false,
                streetViewControl: false,
            });
            google.maps.event.addListener(map, 'dragend', function () {
                bounds = map.getBounds();
                var ne = bounds.getNorthEast();
                var sw = bounds.getSouthWest();
                window.setTimeout(() => {
                    refreshMarkers(bounds);

                }, 2000);
            })

            google.maps.event.addListener(map, 'zoom_changed', function () {
                bounds = map.getBounds();
                var ne = bounds.getNorthEast();
                var sw = bounds.getSouthWest();
                window.setTimeout(() => {
                    refreshMarkers(bounds);

                }, 2000);
            })

            displayRandomMarkers();
        }

        var modal = document.getElementById("myModal");

        var span = document.getElementsByClassName("close")[0];

        span.onclick = function () {
            modal.style.display = "none";
        }

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        function displayRandomMarkers() {
            clearMarkers();
            // Shuffle the array and slice it to get 5 random locations

            let randomIndices = new Set();

            while (randomIndices.size < 5) {
                let randomIndex = Math.floor(Math.random() * NewsDataSet.length());
                randomIndices.add(randomIndex);
            }

            //const shuffledMarkers = allMarkers.sort(() => 0.5 - Math.random()).slice(0, 5);
            


            randomIndices.forEach((index)) {

                const marker = new google.maps.Marker({
                    position: { lat: NewsDataSet[index].lat, lng: NewsDataSet[index].lng },
                    map,
                    title: "",
                    animation: google.maps.Animation.DROP,
                });

                markersArray.push(marker);


                const infowindow = new google.maps.InfoWindow({
                    content: `<div style="text-align:center;"><img src="${newsItem.img}" alt="${newsItem.header}" style="width:100px; cursor:pointer;" onclick="showModal(${newsItem.lat}, ${newsItem.lng}, '${newsItem.header}', '${newsItem.summary}')"><br>${newsItem.type}</div>`,
                });

                infowindow.open(map, marker);
                //marker.addListener('click', () => {
                //  infowindow.open(map, marker);
                //});
            });
        }

        function showModal(latitude, longitude, heading, summary) {
            var streetViewBaseUrl = "https://www.google.com/maps/embed/v1/streetview";
            var apiKey = "AIzaSyDEAoLt5spf_-yVTE33N8__r6oFPcEGtp4";
            var streetViewUrl = `${streetViewBaseUrl}?key=${apiKey}&location=${latitude},${longitude}`;

            document.getElementById("modal-image-container").innerHTML = `<iframe width="100%" height="100%" frameborder="0" style="border:0" src="${streetViewUrl}" allowfullscreen></iframe>`;
            document.getElementById("modal-heading").innerText = heading;
            document.getElementById("modal-summary").innerText = summary;
            modal.style.display = "block";
        }

        function clearMarkers() {
            markersArray.forEach(marker => marker.setMap(null));
            markersArray = [];
        }

        function refreshMarkers(bounds) {
            clearMarkers();
            newsData.forEach(function (newsItem) {
                
                // You can create markers or other elements based on this data
                const marker = new google.maps.Marker({
                    position: { lat: newsItem.lat, lng: newsItem.lng },
                    map,
                    title: "Holder",
                    animation: google.maps.Animation.DROP,
                });
                NewsDataSet.push(marker);

                const infowindow = new google.maps.InfoWindow({
                    content: `<div style="text-align:center;"><img src="${newsItem.img}" alt="${newsItem.header}" style="width:100px; cursor:pointer;" onclick="showModal(${newsItem.lat}, ${newsItem.lng}, '${newsItem.header}', '${newsItem.summary}')"><br>${newsItem.type}</div>`,
                });

                infowindow.open(map, marker);
                //marker.addListener('click', () => {
                //  infowindow.open(map, marker);
                //});
            });
        }


    </script>

    <script>
        // JavaScript to handle the "How to Use" dialog
        const howToUseDialog = document.getElementById("howToUseDialog");
        const closeHowToUseButton = document.getElementById("closeHowToUseButton");

        // Check if the user has already seen the "How to Use" dialog
        const hasSeenHowToUse = localStorage.getItem("hasSeenHowToUse");

        // If the user hasn't seen the dialog, display it
        if (!hasSeenHowToUse) {
            howToUseDialog.style.display = "block";
        }

        // Close the "How to Use" dialog and set a flag in local storage
        closeHowToUseButton.addEventListener("click", function () {
            howToUseDialog.style.display = "none";
            localStorage.setItem("hasSeenHowToUse", "true");
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDEAoLt5spf_-yVTE33N8__r6oFPcEGtp4&map_ids=5da3e99c6ecdf566&callback=initMap">
    </script>
</body>
</html>
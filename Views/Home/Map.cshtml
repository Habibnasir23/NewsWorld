@model IEnumerable<NewsWorld.Models.News>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WorldNews</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins;700&display=swap">
    <link rel="stylesheet" href="../WorldNews/wwwroot/css/site.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

</head>
<body>

    <h1>Have fun looking around!</h1>
    <!-- "How to Use" Dialog -->
    <div id="howToUseDialog" class="dialog">
        <div class="dialog-content">
            <h2>About WorldNews</h2>
            <p>Welcome to our TigerHacks submission! Here's a quick guide on what we offer and how to use WorldNews.</p>
            <ul class="left-align-list">
                <li>We offer an immersive experience through a map that gives you trending news from across the world. </li>
                <li>
                    As you scroll, or zoom, across the world map, the news you see is randomly generated; we want to <br />
                    show you different part of the world, and grow your overall knowledge base.
                </li>
                <li>
                    Once you tap an icon, you will see some basic information about an article, and if it interests <br />
                    you, navigate to it!
                </li>
                <li>
                    To make this experience truly immersive, we embedded Google maps' street view feature to get an idea<br />
                    of what the news article's topic's environment is like.
                </li>
                <li>Enjoy!</li>
            </ul>
            <p>Made by MohammadHossein Momeni, Habib Nasir, Mohammed Abdikebir, and Krishna Chebolu representing Truman!</p>
            <button id="closeHowToUseButton">Got it!</button>
        </div>
    </div>

    <div id="map"></div>
    @* <button onclick="refreshMarkers()">Refresh</button> *@

    <!-- The Modal -->
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="modal-column" id="modal-image-container">
                <!-- Image will be inserted here -->
            </div>
            <div class="modal-column text-content">
                <h2 id="modal-heading">Modal Heading</h2>
                <p id="modal-summary">Some text in the Modal..</p>
            </div>
        </div>

    </div>

    <script>

        var newsData = @Html.Raw(Json.Serialize(Model));

        let map;
        let markersArray = [];
        var bounds;
        function initMap() {

            // Update MAP_ID with custom map ID
            map = new google.maps.Map(document.getElementById('map'), {
                center: {
                    lat: 0,
                    lng: 0,
                },
                zoom: 2,
                mapId: '5da3e99c6ecdf566',
                mapTypeControl: false,
                fullscreenControl: false,
                streetViewControl: false,
            });
            google.maps.event.addListener(map, 'dragend', function () {
                bounds = map.getBounds();
                var ne = bounds.getNorthEast();
                var sw = bounds.getSouthWest();
                window.setTimeout(() => {
                    refreshMarkers(bounds);

                }, 2000);
            })

            google.maps.event.addListener(map, 'zoom_changed', function () {
                bounds = map.getBounds();
                var ne = bounds.getNorthEast();
                var sw = bounds.getSouthWest();
                window.setTimeout(() => {
                    refreshMarkers(bounds);

                }, 2000);
            })

            displayRandomMarkers();
            bounds = map.getBounds();
            refreshMarkers(bounds);
        }

        var modal = document.getElementById("myModal");

        var span = document.getElementsByClassName("close")[0];

        span.onclick = function () {
            modal.style.display = "none";
        }

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
        const genNews = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.4.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M96 96c0-35.3 28.7-64 64-64H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H80c-44.2 0-80-35.8-80-80V128c0-17.7 14.3-32 32-32s32 14.3 32 32V400c0 8.8 7.2 16 16 16s16-7.2 16-16V96zm64 24v80c0 13.3 10.7 24 24 24H296c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24H184c-13.3 0-24 10.7-24 24zm208-8c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H384c-8.8 0-16 7.2-16 16zm0 96c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H384c-8.8 0-16 7.2-16 16zM160 304c0 8.8 7.2 16 16 16H432c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm0 96c0 8.8 7.2 16 16 16H432c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16z"/></svg>`;
        function displayRandomMarkers() {
            clearMarkers();
            const shuffledNewsData = shuffleArray([...newsData]).slice(0, 5);

            shuffledNewsData.forEach((newsItem) => {
                const marker = new google.maps.Marker({
                    position: { lat: newsItem.lat, lng: newsItem.lng },
                    map,
                    title: newsItem.header,
                    icon: {
                        url: 'data:image/svg+xml,' + encodeURIComponent(genNews),
                        scaledSize: new google.maps.Size(30, 30),
                    },
                    animation: google.maps.Animation.DROP,
                });

                markersArray.push(marker);

                const infowindow = new google.maps.InfoWindow({
                    content: `<div style="text-align:center;"><img src="${newsItem.img}" alt="${newsItem.header.replace(/'/g, "\\'")}" style="width:100px; cursor:pointer;" onclick="showModal(${newsItem.lat}, ${newsItem.lng}, '${newsItem.header.replace(/'/g, "\\'")}', '${newsItem.summary.replace(/'/g, "\\'")}')"><br>${newsItem.header}</div>`,
                });



                marker.addListener('click', () => {
                    infowindow.open(map, marker);
                });
            });
            // Shuffle the array and slice it to get 5 random locations
        }

        function showModal(latitude, longitude, heading, summary) {
            console.log("Inside showmodal");
            var streetViewBaseUrl = "https://www.google.com/maps/embed/v1/streetview";
            var apiKey = "AIzaSyDEAoLt5spf_-yVTE33N8__r6oFPcEGtp4";
            var streetViewUrl = `${streetViewBaseUrl}?key=${apiKey}&location=${latitude},${longitude}`;

            document.getElementById("modal-image-container").innerHTML = `<iframe width="100%" height="100%" frameborder="0" style="border:0" src="${streetViewUrl}" allowfullscreen></iframe>`;
            document.getElementById("modal-heading").innerText = heading;
            document.getElementById("modal-summary").innerText = summary;
            modal.style.display = "block";
        }

        function clearMarkers() {
            markersArray.forEach(marker => marker.setMap(null));
            markersArray = [];
        }

        function refreshMarkers(bounds) {
            clearMarkers();
            const shuffledNewsData = shuffleArray([...newsData]).slice(0, 5);

            shuffledNewsData.forEach((newsItem) => {
                const latLng = new google.maps.LatLng(newsItem.lat, newsItem.lng);
                if (bounds.contains(latLng)) { // Check if the marker is within the current map bounds
                    const marker = new google.maps.Marker({
                        position: { lat: newsItem.lat, lng: newsItem.lng },
                        map: map,
                        title: newsItem.header,
                        icon: {
                            // Your icon configuration
                        },
                        animation: google.maps.Animation.DROP,
                    });

                    markersArray.push(marker); // Add the marker to the markersArray

                    const infowindow = new google.maps.InfoWindow({
                        content: `<div style="text-align:center;"><img src="${newsItem.img}" alt="${newsItem.header.replace(/'/g, "\\'")}" style="width:100px; cursor:pointer;" onclick="showModal(${newsItem.lat}, ${newsItem.lng}, '${newsItem.header.replace(/'/g, "\\'")}', '${newsItem.summary.replace(/'/g, "\\'")}')"><br>${newsItem.header}</div>`,
                    });


                    // Open the info window immediately after placing the marker
                    infowindow.open(map, marker);
                }
            });
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]]; // Swap elements
            }
            return array;
        }


    </script>

    <script>
        // JavaScript to handle the "How to Use" dialog
        const howToUseDialog = document.getElementById("howToUseDialog");
        const closeHowToUseButton = document.getElementById("closeHowToUseButton");

        // Check if the user has already seen the "How to Use" dialog
        const hasSeenHowToUse = localStorage.getItem("hasSeenHowToUse");

        // If the user hasn't seen the dialog, display it
        if (!hasSeenHowToUse) {
            howToUseDialog.style.display = "block";
        }

        // Close the "How to Use" dialog and set a flag in local storage
        closeHowToUseButton.addEventListener("click", function () {
            howToUseDialog.style.display = "none";
            localStorage.setItem("hasSeenHowToUse", "true");
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDEAoLt5spf_-yVTE33N8__r6oFPcEGtp4&map_ids=5da3e99c6ecdf566&callback=initMap">
    </script>
</body>
</html>
